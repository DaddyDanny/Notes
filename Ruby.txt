3 data types so far:
number, boolean, and string

number is just a number, no quotes
boolean is either 'true' or 'false' without quotation marks
string is text/numbers inside of quotation marks

variables are a word or name set to a value of a data type
they are set with 'variable_name' and '='
'my_num = 25' sets a variable 'my_numb' to the value of 25

math operators:
addition '+'
subtraction '-'
multiplication '*'
division '/'
exponentiation '**'
modulo '%'

'puts' (put string) prints a string or variable to the screen and creates a new line after
'print' just prints a string or variable to the screen and doesn't create a new line
to print a string in the middle of a sentence, use '#{string_name}' in place of a word

string methods:
'string.method' is the syntax

'.length' returns the length of the string
'.reverse' returns the string backwards
'.upcase' returns the string in all caps
'.downcase' returns the string in all lowercase
'.capitalize' returns the string with the first letter capitalized
'.split' takes a string and returns an array

'#' indicates a single-line comment
anything in a comment is not read by the interpreter

'=begin' indicates the start of a multi-line comment
'=end' indicates the end of a multi-line comment
anything between these is not read by the interpreter
no '#'s are required for these comments

naming conventions for variables:
words should always be in lowercase
words should be separated by an underscore '_'
words should only have numbers and letters

'gets' is a method that receives input from a user
Ruby automatically creates a new line after every input
'.chomp' deletes that extra line

when using a method to alter a variable, you can use '!' to avoid reassigning.
example = test
example.capitalize!
results in 'example = Test'

control flow:
'if' statements activate if assigned to a value that is true
starts with 'if', ends with 'end'
'elsif' is an alternate 'if' statement. tests this if the 'if' statement and any other 'elsif' statements above are not true
'else' catches anything not specificially mentioned in 'if' and 'elsif' statements
'unless' activates if assigned to a value that is false

operators:
'=' is an assignment operator, meaning it is used to assign values to variables
example = true

'==' is used as a comparator or relational operator, meaning it checks to see if two things are equal to each other
'!=' is used to check if two values are not equal
'>' '<' '<=' and '>=' are the other comparators

logical/boolean operators are used to produce a 'true' or 'false' value by comparing 2 or more values of 'true' or 'false'.
'&&' or 'and' returns true only if all values being operated upon are true
'||' or 'or' returns true if any of the values being operated upon are true. also called an 'inclusive or'
'!' or 'not' returns the opposite of the value being operated upon
these can be combined in an operation, parentheses can be used and will be treated as they would be in math 'PEMDAS'

'.include?' checks if a string contains a substring. evaluates to true or false

'.gsub' stands for global substitution. substitutes a desginated string with another
syntax - string_to_change.gsub!(/string/, "new_string")

loops:
'while' loops will repeat as long as the terms are true
must remember incrementer to prevent infinite loops 
'until' loop basically backwards 'while' loop.  loop will repeat until terms become true
'for' loop will repeat for a predetermined amount of time

to assign and increment at the same time use '+=' rather than var = var + 1
'-=' '*=' and '/=' all work as well

to set a range, use 'low_number...high_number' this excludes the high_number
to include the high_number, use two dots 'low_number..high_number'

'next' can be used to skip a step if a certain parameter is met

iterators:
'loop' is the simplest iterator
syntax to 'loop' is - 'var = 0 loop do var += 1 print "#{var} break if var > 5 end'
do/end can be replaced by {/}

'.each' is an iterator that will perform a task on every element of an object

'.times' is an super compact 'for' loop

arrays:
arrays are variables with multiple values '[1, 2, 3, 4]'
to access elements from the array, use an index value 'array[i]
index values start at 0, not 1
arrays can contain strings, booleans, numbers, and even other arrays
arrays of arrays are called 'multidimensional arrays'

hashes:
a hash is like an array that contains key-value pairs
hash = {key1 => value1, key2 => value2}
this is hash "literal notation", literally describing the hash

can also use 'Hash.new' to create hashes
'hash = Hash.new' creates an empty hash
add values to the empty hash with:
'hash["key"] = "value"
this is called 'bracket notation'

access values of the hash just like an array 'hash[key]' will return the value of the key-vaue pair

